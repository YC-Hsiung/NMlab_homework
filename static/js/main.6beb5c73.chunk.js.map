{"version":3,"sources":["index.js"],"names":["Square","props","type","className","PlayGround","handleKeyDown","e","state","gamestart","keyCode","setState","direction","key","gameprocess","movesnack","generatefood","snack","slice","indexOf","buttonDescription","field","Array","width","fill","foodpos","length","NewHead","unshift","pop","ExistFood","score","forEach","idx","pos","Math","floor","random","handleOnClick","document","addEventListener","this","setInterval","removeEventListener","map","id","style","height","onClick","React","Component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.6beb5c73.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nfunction Square(props) {\n  if (props.type === 0) {\n    return <div className=\"ground\"></div>;\n  } else if (props.type === 1) {\n    return <div className=\"snackbody\"></div>;\n  } else {\n    return <div className=\"food\"></div>;\n  }\n}\n\nclass PlayGround extends React.Component {\n  constructor(props) {\n    super(props);\n    this.width = this.props.width;\n    this.state = {\n      field: Array(this.width ** 2).fill(0),\n      snack: [Math.floor(this.width ** 2 / 2)],\n      direction: \"ArrowRight\",\n      gamestart: false,\n      score: 0,\n      ExistFood: false,\n      buttonDescription: \"START\",\n    };\n    this.state.field[Math.floor(this.width ** 2 / 2)] = 1;\n  }\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.handleKeyDown);\n    setInterval(this.gameprocess, 50);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.handleKeyDown);\n  }\n  handleKeyDown = (e) => {\n    if (this.state.gamestart && e.keyCode >= 37 && e.keyCode <= 40) {\n      this.setState({\n        direction: e.key,\n      });\n    }\n  };\n  gameprocess = () => {\n    this.movesnack();\n    this.generatefood();\n    if (this.state.snack.slice(1, -1).indexOf(this.state.snack[0]) !== -1) {\n      this.setState({\n        gamestart: false,\n        buttonDescription: \"RESTART\",\n      });\n    }\n  };\n  movesnack = () => {\n    if (!this.state.gamestart) {\n      return;\n    }\n    let field = Array(this.width ** 2).fill(0);\n    let foodpos = this.state.field.indexOf(2);\n    field[foodpos] = 2;\n    let snack = this.state.snack.slice();\n    //check whether direction is valid\n    if (snack.length > 1) {\n      switch (this.state.direction) {\n        case \"ArrowUp\":\n          if (\n            snack[0] - this.width === snack[1] ||\n            snack[0] - this.width + this.width ** 2 === snack[1]\n          ) {\n            this.setState({\n              direction: \"ArrowDown\",\n            });\n          }\n          break;\n        case \"ArrowLeft\":\n          if (\n            snack[0] - 1 === snack[1] ||\n            snack[0] - 1 + this.width === snack[1]\n          ) {\n            this.setState({\n              direction: \"ArrowRight\",\n            });\n          }\n          break;\n        case \"ArrowDown\":\n          if (\n            snack[0] + this.width === snack[1] ||\n            snack[0] + this.width - this.width ** 2 === snack[1]\n          ) {\n            this.setState({\n              direction: \"ArrowUp\",\n            });\n          }\n          break;\n        case \"ArrowRight\":\n          if (\n            snack[0] + 1 === snack[1] ||\n            snack[0] + 1 - this.width === snack[1]\n          ) {\n            this.setState({\n              direction: \"ArrowLeft\",\n            });\n          }\n          break;\n        default:\n          break;\n      }\n    }\n    let NewHead = null;\n    switch (this.state.direction) {\n      case \"ArrowUp\":\n        NewHead = snack[0] - this.width;\n        snack.unshift(NewHead > 0 ? NewHead : NewHead + this.width ** 2);\n        break;\n      case \"ArrowLeft\":\n        NewHead = snack[0] - 1;\n        snack.unshift(\n          snack[0] % this.width === 0 ? NewHead + this.width : NewHead\n        );\n        break;\n      case \"ArrowDown\":\n        NewHead = snack[0] + this.width;\n        snack.unshift(\n          NewHead < this.width ** 2 ? NewHead : NewHead - this.width ** 2\n        );\n        break;\n      case \"ArrowRight\":\n        NewHead = snack[0] + 1;\n        snack.unshift(\n          NewHead % this.width !== 0 ? NewHead : NewHead - this.width\n        );\n        break;\n      default:\n        break;\n    }\n    if (NewHead !== foodpos) {\n      snack.pop();\n    } else {\n      this.setState({\n        ExistFood: false,\n        score: this.state.score + 1,\n      });\n    }\n    snack.forEach((idx) => {\n      field[idx] = 1;\n    });\n    this.setState({\n      snack: snack,\n      field: field,\n    });\n  };\n  generatefood = () => {\n    if (this.state.ExistFood) {\n      return;\n    }\n    let field = this.state.field;\n    let pos = 0;\n    do {\n      pos = Math.floor(Math.random() * (this.width ** 2 - 1));\n    } while (this.state.snack.indexOf(pos) !== -1);\n    field[pos] = 2;\n    this.setState({ field: field, ExistFood: true });\n  };\n  handleOnClick = () => {\n    if (!this.state.gamestart && this.state.buttonDescription === \"START\") {\n      this.setState({\n        gamestart: true,\n        buttonDescription: \"PAUSE\",\n      });\n    } else if (this.state.buttonDescription === \"PAUSE\") {\n      this.setState({\n        gamestart: false,\n        buttonDescription: \"CONTINUE\",\n      });\n    } else if (this.state.buttonDescription === \"CONTINUE\") {\n      this.setState({\n        gamestart: true,\n        buttonDescription: \"PAUSE\",\n      });\n    } else if (this.state.buttonDescription === \"RESTART\") {\n      this.setState({\n        gamestart: true,\n        buttonDescription: \"PAUSE\",\n        snack: [Math.floor(this.width ** 2 / 2)],\n        direction: \"ArrowRight\",\n        score: 0,\n        field: Array(this.width ** 2).fill(0),\n        ExistFood: false,\n      });\n    }\n  };\n  render() {\n    let field = this.state.field.map((type, idx) => (\n      <Square key={idx} type={type} />\n    ));\n    return (\n      <div id=\"game\">\n        <div id=\"scorepanel\">score: {this.state.score}</div>\n        <div\n          id=\"playground\"\n          style={{ width: this.width * 15, height: this.width * 15 }}\n        >\n          {field}\n        </div>\n        <button className=\"ui primary button\" onClick={this.handleOnClick}>\n          {this.state.buttonDescription}\n        </button>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <div>\n    <div id=\"header\"></div>\n    <div id=\"left\"></div>\n    <div id=\"right\"></div>\n    <div id=\"main\">\n      <label>Snack</label>\n      <PlayGround width={19} />\n    </div>\n    <div id=\"footer\">made by 姓名：熊彥程, 學號：B07901044</div>\n  </div>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}